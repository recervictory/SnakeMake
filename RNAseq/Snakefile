import glob
import os
import yaml

# Todo: Read Config File
with open("config.yaml", "r") as file:
    params = yaml.safe_load(file)



# Todo: get list of fastq files
samples, reads = glob_wildcards("raw_data/{sample}_{read}.fastq.gz")


rule all:
    input:
        expand('fastqc/{sample}_{read}', sample=samples, read=reads),
        expand('trimmed_fastqc/{sample}_{read}', sample=samples, read=reads),
        'star_genomeDir/',
        expand('star_mapped/{sample}_mapped',sample=samples)

rule fastQC:
    input:
        'raw_data/{sample}_{read}.fastq.gz'
    output:
        directory('fastqc/{sample}_{read}'),
        'fastqc/{sample}_{read}/{sample}_{read}.fastq.html'
    threads: 4
    shell:
        '''
        mkdir -p {output}
        fastqc -t {threads} {input} --outdir {output}
        '''

rule cudaAdapt:
    input:
        read1 = 'raw_data/{sample}_R1.fastq.gz',
        read2 = 'raw_data/{sample}_R2.fastq.gz',
    params:
        adapter_a = params['cudaAdapt']['adapter_a'],
        adapter_A = params['cudaAdapt']['adapter_A'],
        cpu_cores = params['cudaAdapt']['cpu_cores'],
        quality_score_threshold = params['cudaAdapt']['quality_score_threshold'],
        min_length_threshold = params['cudaAdapt']['min_length_threshold']
    output:
        read1='adapter_removed/{sample}_R1.trimmed.fastq.gz',
        read2='adapter_removed/{sample}_R2.trimmed.fastq.gz'
    shell:
        '''
        cudadapt    -a {params.adapter_a} -A {params.adapter_A} 
                    -j {params.cpu_cores} 
                    -q {params.quality_score_threshold} -m {params.min_length_threshold}
                    -o {output.read1} -p {output.read2}
                    {input.read1} {input.read2}
        '''

rule QcCudaAdapt:
    input:
        'adapter_removed/{sample}_{read}.trimmed.fastq.gz'
    output:
        directory('trimmed_fastqc/{sample}_{read}'),
        'trimmed_fastqc/{sample}_{read}/{sample}_{read}.fastq.html'
    threads: 4
    shell:
        '''
        mkdir -p {output}
        fastqc -t {threads} {input} --outdir {output}
        '''            

rule starIndexing:
    params:
        gtf = params['starIndex']['gtf_path'],
        ref = params['starIndex']['ref_path'],
    threads: 16
    output:
        directory('star_genomeDir/')
    shell:
        '''
        mkdir -p {output}
        STAR    --runThreadN {threads} 
                --runMode genomeGenerate 
                --genomeDir ./{output} 
                --sjdbGTFfile {params.gtf} 
                --genomeFastaFiles  {params.ref}
                --sjdbOverhang 99 
                --limitGenomeGenerateRAM 35000000000
        '''


if params['cudaAdapt']['run']:
    star_read1 = 'adapter_removed/{sample}_R1.trimmed.fastq.gz'
    star_read2 = 'adapter_removed/{sample}_R2.trimmed.fastq.gz'
else:
    star_read1 = 'raw_data/{sample}_R1.fastq.gz'
    star_read2 = 'raw_data/{sample}_R2.fastq.gz'


rule Star_Mapping:
    params:
        gtf = params['starIndex']['gtf_path'],
        ref = params['starIndex']['ref_path'],
    input:
        star_index = 'star_genomeDir/',
        read1 = star_read1,
        read2 = star_read2
    threads: 6
    output:
        directory('star_mapped/{sample}_mapped')
    shell:
        '''
        STAR --runThreadN {threads} 
        --readFilesIn {input.read1} {input.read2}
        --genomeDir ./{input.star_index}
        --sjdbGTFfile  {params.gtf} 
        --runMode alignReads 
        --limitBAMsortRAM 120416916151 
        --readFilesCommand zcat
        --outSAMstrandField intronMotif 
        --quantMode GeneCounts 
        --outSAMtype BAM SortedByCoordinate 
        --outFileNamePrefix sample1
        '''               