import glob
import os

# Todo: get list of fastq files
directories,fastqs  = glob_wildcards("raw_data/{directory}/{sample}.fastq.gz")

# Todo: Config File Passer
configfile: 'config.yaml'

# Todo: Read Config File
params = configparser.ConfigParser()
params.read(configfile)


if params['cudaAdapter']['run']:
    read1 = 'adapter_removed/{directory}/{sample}_R1.trimmed.fastq.gz'
    read2= 'adapter_removed/{directory}/{sample}_R2.trimmed.fastq.gz'
else:
    read1 = 'raw_data/{directory}/{sample}_R1.fastq.gz'
    read2 ='raw_data/{directory}/{sample}_R2.fastq.gz'



rule fastQC:
    input:
        'raw_data/{directory}/{sample}.fastq.gz'
    output:
        directory('fastqc/{directory}/{sample}_fastqc')
    threads: 4
    shell:
        '''
        mkdir -p {output}
        fastqc -t {threads} {input} --outdir {output}
        '''

rule cudaAdapt:
    input:
        read1='raw_data/{directory}/{sample}_R1.fastq.gz',
        read2='raw_data/{directory}/{sample}_R2.fastq.gz',
        job=4,
        quality_score_threshold=20,
        min_length_threshold=50,

    threads: 10
    output:
        read1='adapter_removed/{directory}/{sample}_R1.trimmed.fastq.gz',
        read2='adapter_removed/{directory}/{sample}_R2.trimmed.fastq.gz'
    shell:
        '''
        cudadapt    -a {input.adapter_a} -A {input.adapter_A} 
                    -j {input.job} 
                    -q {input.quality_score_threshold} -m {import.min_length_threshold}
                    -o {output.read1} -p {output.read2}
                    {input.read1} {input.read2}
        '''

rule QcCudaAdapt:
    input:
        'adapter_removed/{directory}/{sample}.fastq.gz'
    output:
        directory('adapter_removed_fastqc/{directory}/{sample}_fastqc')
    threads: 4
    shell:
        '''
        mkdir {output}
        fastqc -t {threads} {input} --outdir {output}
        '''

rule starIndexing:
    input:
        gtf="{params['starIndex']['gtf']}",
        ref="{params['starIndex']['ref']}",
        genome="{params['starIndex']['genome']}",
    threads: 16
    output:
        directory('Star_Indexing/{input[2]}')
    shell:
        '''
        mkdir -p {output}
        STAR    --runThreadN {threads} 
                --runMode genomeGenerate 
                --genomeDir ./{output} 
                --sjdbGTFfile {input[0]} 
                --genomeFastaFiles  {input[1]}
                --sjdbOverhang 99 
                --limitGenomeGenerateRAM 35000000000
        '''
    
rule Star_Mapping:
    input:
        gtf="{params['starIndex']['gtf']}",
        ref="{params['starIndex']['ref']}",
        genome="{params['starIndex']['genome']}",
        star_index="Star_Indexing/{params['starIndex']['genome']}/",
        read1=read1
        read2=read2
    threads: 6
    output:
        'Star_Indexing/{genome}/'
    shell:
        '''
        STAR --runThreadN {threads} 
        --readFilesIn {input.read1} {input.read2}
        --genomeDir ./{input.star_index}
        --sjdbGTFfile  {input.gtf} 
        --runMode alignReads 
        --limitBAMsortRAM 120416916151 
        --readFilesCommand zcat
        --outSAMstrandField intronMotif 
        --quantMode GeneCounts 
        --outSAMtype BAM SortedByCoordinate 
        --outFileNamePrefix sample1
        '''
        
